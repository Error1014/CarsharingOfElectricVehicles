// <auto-generated />
using System;
using Cars.Repository.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cars.Repository.Migrations
{
    [DbContext(typeof(CarContext))]
    partial class CarContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cars.Repository.Entities.BrandModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BrandModels");
                });

            modelBuilder.Entity("Cars.Repository.Entities.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCASCO")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRepair")
                        .HasColumnType("bit");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandModelId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Cars.Repository.Entities.CarCharacteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CharacteristicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CharacteristicId");

                    b.ToTable("CarsCharacteristics");
                });

            modelBuilder.Entity("Cars.Repository.Entities.CarTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("TagId");

                    b.ToTable("CarTags");
                });

            modelBuilder.Entity("Cars.Repository.Entities.Characteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UOM")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Characteristics");
                });

            modelBuilder.Entity("Cars.Repository.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Cars.Repository.Entities.Car", b =>
                {
                    b.HasOne("Cars.Repository.Entities.BrandModel", "BrandModel")
                        .WithMany("Cars")
                        .HasForeignKey("BrandModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BrandModel");
                });

            modelBuilder.Entity("Cars.Repository.Entities.CarCharacteristic", b =>
                {
                    b.HasOne("Cars.Repository.Entities.Car", "Car")
                        .WithMany("CarCharacteristics")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cars.Repository.Entities.Characteristic", "Characteristic")
                        .WithMany("CarCharacteristics")
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Characteristic");
                });

            modelBuilder.Entity("Cars.Repository.Entities.CarTag", b =>
                {
                    b.HasOne("Cars.Repository.Entities.Car", "Car")
                        .WithMany("CarTags")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cars.Repository.Entities.Tag", "Tag")
                        .WithMany("CarTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Cars.Repository.Entities.BrandModel", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Cars.Repository.Entities.Car", b =>
                {
                    b.Navigation("CarCharacteristics");

                    b.Navigation("CarTags");
                });

            modelBuilder.Entity("Cars.Repository.Entities.Characteristic", b =>
                {
                    b.Navigation("CarCharacteristics");
                });

            modelBuilder.Entity("Cars.Repository.Entities.Tag", b =>
                {
                    b.Navigation("CarTags");
                });
#pragma warning restore 612, 618
        }
    }
}
